=begin
    Duskruin Arena Script
    Automatic Duskruin arena script that will fight for you. Just go into the entrance
    and the script will take over (as long as you were running it before going in).
	
    SYNTAX - ;tdusk <SLIP/TOKEN/BOOKLET/JAR/VOUCHER>
	
    See ;tdusk help
    For additional setup/help info.
	
	todo: unsure
     author: Tysong (horibu on PC), original Nylis
       name: duskruin_arena
       tags: duskruin, arena
    version: 1.3

    changelog:
        1.3 (2018-12-15)
            Changed fput to put for bard stopping 1018 and inv enh off/on
        1.2 (2018-12-15)
            Added automatic dismissing of NPCs if dead
        1.1 (2018-06-26)
            Added new UserVars.tdusk[:broadcast] setting to enable/disable lnet broadcast
        1.0 (2017-08-23)
            Redo of duskruin_arena to use UserVars for settings so not lost between updates

    credit & thanks:
        Nylis for his initial script released back in 2015.
=end
=begin
=end

if LNet.respond_to?(:safe_send)
	lnet_or_0net = "0net"
else
	lnet_or_0net = "lnet"
end

UserVars.tdusk 					  ||= {}
UserVars.tdusk[:activescripts]		= ['stand','duskruin_watch']	if UserVars.tdusk[:activescripts].nil?
UserVars.tdusk[:scrippouch]			= 'leather pouch'				if UserVars.tdusk[:scrippouch].nil?
UserVars.tdusk[:waggle_me]			= true							if UserVars.tdusk[:waggle_me].nil?
UserVars.tdusk[:pause_me]			= true							if UserVars.tdusk[:pause_me].nil?
UserVars.tdusk[:enhancive_me]		= false							if UserVars.tdusk[:enhancive_me].nil?
UserVars.tdusk[:scriprummage]		= true							if UserVars.tdusk[:scriprummage].nil?
UserVars.tdusk[:high_ds]			= false							if UserVars.tdusk[:high_ds].nil?
UserVars.tdusk[:attack_script]		= false							if UserVars.tdusk[:attack_script].nil?
UserVars.tdusk[:broadcast]			= true							if UserVars.tdusk[:broadcast].nil?


#activescripts = Array['manaleech','stand','symbolz','transcend','duskruin_watch','high_ds']
#scrippouch    = "leather pouch"
#waggle_me     = true  # true to do ;waggle between runs
#pause_me      = true  # true to pause between runs
#enhancive_me  = false # true to use INVENTORY ENHANCIVE ON/OFF to toggle enhancives inside arena
#scriprummage  = 1

if !Script.exists?("duskruin_watch")
	echo "You need to ;repo download duskruin_watch"
	echo "For this script to work."
	exit
elsif !UserVars.tdusk[:activescripts].include? "duskruin_watch"
	echo "You took out duskruin_watch from activescripts"
	echo "You should not do this, I put it back for you"
	UserVars.tdusk[:activescripts].push("duskruin_watch")
elsif UserVars.tdusk[:attack_script] == true && !Script.exists?("#{Char.name}-duskattack")
	echo "You have a custom attack script turned on."
	echo "But you attack_script turned on."
	echo "Please create a #{Char.name}-duskattack.lic script with your routine."
	echo "Or set ;e UserVars.tdusk[:attack_script] = false"
	exit
end

start_time    = 0
total_time    = 0
kill_time     = 0
avg_reg       = 0
avg_champ     = 0
group_size    = 0
UserVars.tdusk[:wave_number] = 0
UserVars.tdusk[:high_ds] == false

if $frontend == 'stormfront'
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

=begin
def watch(number)
	waitrt?
	fput "watch #{checknpcs[0]}"
	line = waitfor "...wait", "cannot concentrate well enough", "You are still stunned", "back pedal", "bob back and forth", "lean out of the way", "try to duck down", "roll out of the way", "prepare to jump", "doesn't appear to be up to anything", "looking for any untoward activities", "You've already spotted", "watching your every move"
	if line =~ /back (pedal)|(bob) back and forth|(lean) out of the way|try to (duck) down|(roll) out of the way|prepare to (jump)/
		waitrt?
		fput "#{$+.split.last}"
		attack(number)
	elsif line =~ /You've already spotted|doesn't appear to be up to anything|watching your every move|cannot concentrate well enough|You cannot do that while berserking./
		waitrt?
		attack(number)
	elsif line =~ /...wait|You are still stunned/
		sleep 1
		watch(number)
	else
		_respond ""
		_respond "something went wrong, report me"
		_respond ""
	end
end
=end

def attack(number)
	GameObj.npcs.each { |npc| 
		if !(npc.status =~ /dead|gone/) && UserVars.tdusk[:attack_script] == true
			start_script("#{Char.name}-duskattack")
			wait_while {running?("#{Char.name}-duskattack")}

		#Wizard Routine for Treeva & Tysong
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Treeva|Tysong/
			fput "symbol of sleep"
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "pray" if !(Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			pause 0.1 if (checkmana >= 100 and UserVars.tdusk[:wave_number] == 25)
			Spell[950].cast('910 910 910 910 910 910') if (checkmana >= 100 and UserVars.tdusk[:wave_number] == 25)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "pray" if checkmana < 6
				Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
				multifput "stance offensive", "incant 903 cast", "stance defensive" if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				multifput "stance offensive", "incant 903 evoke", "stance defensive" if Spell[903].affordable? and !(npc.name =~ /crimson|fire|troll/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				multifput "stance offensive", "incant 906", "stance defensive" if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and npc.name =~ /troll/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				pause 0.1
			end
			Script.start("foreach", "in room; look item")
			
		#Wizard Routine for Miaya 
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Miaya/
			waitrt? if !(npc.status =~ /dead|gone/)
			fput "stomp" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			pause 0.5 if (checkmana > 120 and UserVars.tdusk[:wave_number] == 25)
			Spell[950].cast('910 910 910 910 910 910') if (checkmana > 120 and UserVars.tdusk[:wave_number] == 25)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
			while !(npc.status =~ /dead|gone/) && !dead?
				multifput "stance offensive", "incant 904 cast", "stance defensive" if Spell[903].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0 && UserVars.tdusk[:high_ds] == false
				pause 0.25
			end
			
		#Wizard Routine for Whirlin
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Whirlin/
			if GameObj.right_hand.noun == nil && GameObj.loot.find { |item| item.name =~ /arrow/ }
				multifput "gather dark arrow", "put my Arrow in arrows in my spidersilk quiver"
				fput "drop arrow" if GameObj.right_hand != nil
			end
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 919" if (Spell[919].affordable?) && (Array[4,9,14,19,24].include? UserVars.tdusk[:wave_number])
			fput "stomp" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			fput "incant 917 fire" if (Spell[917].affordable?) and npc.name !~ /crimson|fire/ and !(npc.status =~ /dead|gone/) && (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			fput "incant 917 cold" if (Spell[917].affordable?) and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) && (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			#Spell[915].cast if Spell[915].affordable? and npc.noun =~ /champion|marauder|slaver|shaman|troll|witch|servant|seeker|grahnk|ranger|wildling/
			while !(npc.status =~ /dead|gone/) && !dead?
				if Spell[506].timeleft <= 0.10 && Spell[506].affordable? && !Spell[598].active?
					return if checkrt > 0 && checkcastrt > 0
					Spell[506].cast  && UserVars.tdusk[:high_ds] == false
				elsif checkrt == 0
					fput "take 1 arrow from my spidersilk quiver" if GameObj.right_hand.noun != "arrow" and !(npc.status =~ /dead|gone/)
					fput "stance offensive" if stance != "offensive"
					fput "fire" if GameObj.right_hand.noun == "arrow" and !(npc.status =~ /dead|gone/) && UserVars.tdusk[:high_ds] == false
				end
				pause 0.25
			end
		
		#Wizard Routine for Alasatia & Altheren
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Alasatia|Altheren|Chopad/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			#Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
			while !(npc.status =~ /dead|gone/)
				Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active? and checkrt == 0 and checkcastrt == 0
				multifput "stance offensive", "incant 907", "stance defensive" if Spell[907].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
				multifput "stance offensive", "incant 903", "stance defensive" if Spell[903].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) and checkrt == 0 and checkcastrt == 0
				multifput "stance offensive", "incant 906", "stance defensive" if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number] and checkrt == 0 and checkcastrt == 0
				pause 0.1
			end
			if Spell[515].timeleft < 0.25
				waitcastrt?
				fput "incant 515" if Spell[515].affordable?
			end
		
		#Wizard Routine for Ragz
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Ragz/
            waitrt? if !(npc.status =~ /dead|gone/)
            waitcastrt? if !(npc.status =~ /dead|gone/)
            fput "tap" if (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && Spell[909].active?
			Spell[917].cast if (Spell[917].affordable? and (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]))
            Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
            while !(npc.status =~ /dead|gone/)
                multifput "stance offensive", "incant 903", "stance defensive" if Spell[903].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
                multifput "stance offensive", "incant 904", "stance defensive" if Spell[904].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) and checkrt == 0 and checkcastrt == 0
                multifput "stance offensive", "incant 906", "stance defensive" if Spell[906].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number] and checkrt == 0 and checkcastrt == 0
                pause 0.25
            end
			
		#Wizard Rotuine for Claudaro
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Claudaro/
            waitrt? if !(npc.status =~ /dead|gone/)
            waitcastrt? if !(npc.status =~ /dead|gone/)
            Spell[917].cast if (Spell[917].affordable? and UserVars.tdusk[:wave_number] != 25)
            Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active? and !Spell[515].active?
            while !(npc.status =~ /dead|gone/)
                multifput "stance offensive", "incant 910", "stance defensive" if Spell[904].affordable? and npc.name =~ /crimson|fire/ and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
                multifput "stance offensive", "incant 906", "stance defensive" if Spell[903].affordable? and !(npc.name =~ /crimson|fire/) and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
                pause 0.25
            end
			
		#Sorcerer Routine for Xred
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Xred/
			if npc.name !~ /automaton/ and !(npc.status =~ /dead|gone/) and GameObj.npcs
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[717].affordable?) and checkspirit >= 6 )
				waitrt?
				waitcastrt?
				Spell[717].cast if (Spell[717].affordable?)
			end
			while (!(npc.status =~ /dead|gone/) and GameObj.npcs) do
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[711].affordable?) and checkspirit >= 6 )
				waitrt?
				waitcastrt?
				Spell[711].cast if (Spell[711].affordable?)
			end
		
		#Sorcerer Routine for Rasko
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Rasko|Roiken/
			pause 1.25
			if npc.name !~ /automaton/ && !(npc.status =~ /dead|gone/) && GameObj.npcs
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[717].affordable?) && checkspirit >= 6 )
				waitrt?
				waitcastrt?
				fput "incant 717" if (Spell[717].affordable?)
			end
			pause 0.5
			if npc.name !~ /automaton/ && !(npc.status =~ /dead|gone/) && (npc.status =~ /lying down|stunned|prone|sleeping|kneeling/) && GameObj.npcs 
				waitrt?
				waitcastrt?
				Spell[9918].cast if (!(Spell[715].affordable?) && checkspirit >= 6 )
				waitrt?
				waitcastrt?
				fput "incant 715" if (Spell[715].affordable?)
			end
			while (!(npc.status =~ /dead|gone/) && GameObj.npcs) do
				fput "sign of wracking" if (checkmana < 20 && checkspirit >= 6 )
				multifput "incant 717" if Spell[717].affordable? && !(npc.status =~ /dead|gone/) && checkrt == 0 && checkcastrt == 0 && npc.name !~ /automaton/
				multifput "incant 711" if Spell[711].affordable? && !(npc.status =~ /dead|gone/) && checkrt == 0 && checkcastrt == 0 && npc.name =~ /automaton/
				pause 0.1
			end
			Script.start("foreach", "in room; look item")
			Script.start("foreach", "in room; get item; stow item") if UserVars.tdusk[:wave_number] == 25

		#Sorcerer Routine for Maetriks
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Maetriks/
			pause 1.25
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
            multifput "prep 417", "cast void" if GameObj.loot.find { |item| item.name.include? "void" } && npc.name =~ /automaton/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)			
			fput "incant 717" if (Spell[717].affordable?) && npc.status !~ /dead|gone/ && npc.name !~ /automaton/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 717" if (Spell[717].affordable?) && npc.status !~ /dead|gone|lying down|stunned|prone|sleeping|kneeling/ && npc.name !~ /automaton/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
            fput "incant 720" if (Spell[720].affordable?) && npc.status !~ /dead|gone/ && npc.name !~ /automaton/ && !GameObj.loot.find { |item| item.name.include? "void" } 
            while !(npc.status =~ /dead|gone/) && !dead?
                fput "incant 711" if (Spell[711].affordable?) && npc.status !~ /dead|gone/ && npc.name =~ /crab|grahnk|yeti|champion|automaton/ && checkrt == 0 && checkcastrt == 0
                fput "incant 705" if (Spell[705].affordable?) && npc.status !~ /dead|gone/ && npc.name !~ /crab|grahnk|yeti|champion|automaton/ && checkrt == 0 && checkcastrt == 0
                pause 0.25 if !(npc.status =~ /dead|gone/)
            end
		
		#Bard Routine for Luxelle
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Luxelle/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 1002" if Spell[1002].affordable? and npc.noun =~ /champion|marauder|slaver|shaman|troll|witch|servant|seeker|grahnk|ranger|wildling/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "symbol of mana" if checkmana <= 40
			fput "incant 1030" if Spell[1030].affordable?
			while !(npc.status =~ /dead|gone/) && !dead?
				fput "symbol of mana" if checkmana <= 40 and checkrt == 0 and checkcastrt == 0
				fput "incant 1030" if Spell[1030].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
				pause 0.5
			end
			put "curtsy grand" if npc.status =~ /dead/ and UserVars.tdusk[:wave_number] == 25 && !dead?
			
		#Bard Routine for Naamit
        elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Naamit/
            waitrt? if !(npc.status =~ /dead|gone/)
            waitcastrt? if !(npc.status =~ /dead|gone/)
            fput "sign wracking" if checkmana <= 30 && checkspirit >= 6
            fput "incant 1030" if Spell[1030].affordable?
            while !(npc.status =~ /dead|gone/) && !dead?
                if checkmana <= 30  && checkspirit >= 6 && checkrt == 0 && checkcastrt == 0
					fput "sign wracking" 
				end
                if Spell[1030].affordable? and !(npc.status =~ /dead|gone/) and checkrt == 0 and checkcastrt == 0
					fput "incant 1030"
				end
                pause 0.5
            end

		#Warrior Routine for Durakar
		elsif !(npc.status =~ /dead|gone/) && Char.name =~ /Durakar/
            while npc.name =~ /automaton|champion/ and !(npc.status =~ /dead|gone/)
                fput "berserk" if !(Spell[9607].active?) and checkstamina >= 20 and checkrt == 0 and checkcastrt == 0
				multifput "aim chest", "ambush" if !(Spell[9607].active?) and checkstamina < 20  and checkrt == 0 and checkcastrt == 0
				pause 0.25
			end
            while (npc.name =~ /yeti|mammoth/ and !(npc.status =~ /lying down|stunned/) and !(npc.status =~ /dead|gone/)) do
                multifput "aim left leg", "ambush" if checkrt == 0 and checkcastrt == 0 and !(Spell[9607].active?)
				pause 0.25
            end
            while (npc.name =~ /yeti|mammoth/ and (npc.status =~ /lying down|stunned/) and !(npc.status =~ /dead|gone/)) do
                multifput "aim head", "ambush" if checkrt == 0 and checkcastrt == 0 and !(Spell[9607].active?)
				pause 0.25
            end
		
		#Attack Routine for Hoy w/ SK 506
		elsif !(npc.status =~ /dead|gone/) and Char.name =~ /Hoy/
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 615" if (Spell[615].affordable?)
			waitrt? if !(npc.status =~ /dead|gone/)
			waitcastrt? if !(npc.status =~ /dead|gone/)
			fput "incant 616" if (Spell[616].affordable?) && (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
			while !(npc.status =~ /dead|gone/) && !dead?
				if Spell[506].timeleft <= 0.04 && Spell[506].affordable? && !Spell[598].active?
					return if checkrt > 0 && checkcastrt > 0
					Spell[506].cast  && UserVars.tdusk[:high_ds] == false
				elsif checkrt == 0
					fput "stance offensive" if stance != "offensive"
					multifput "aim head", "ambush" if UserVars.tdusk[:high_ds] == false
				end
				pause 0.15
			end
			waitrt?
			fput "touch #{npc.noun}"
		
		#Paladin Routine for Nairdin
		elsif Char.name =~ /Nairdin/
            waitrt?
            waitcastrt?
            fput "beseech sledge" if npc.name =~ /champion|automaton/
            fput "symbol of sleep" if npc.name =~ /champion|yeti|mammoth|grahnk/
            while npc.status !~ /dead|gone/ && !dead?
                if npc.name =~ /automaton/ && checkrt == 0 && npc.status !~ /dead|gone/
                    pause 0.6
                    put "qstr 5" if !Spell[9005].active? && npc.status !~ /dead|gone/
                    put "mstr target" if !Spell[9005].active? && npc.status !~ /dead|gone/
                    put "qstr 3" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "aim left leg" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "ambush" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "aim chest" if Spell[9005].active? && npc.status !~ /dead|gone/
                    put "ambush" if Spell[9005].active? && npc.status !~ /dead|gone/
                elsif npc.name =~ /champion/ && checkrt == 0 && npc.status !~ /dead|gone/
                    pause 0.6
                    put "qstr 5 mstr target" if npc.status !~ /dead|gone/
                    put "qstr 3" if npc.status !~ /dead|gone/
                    put "aim chest" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                    put "sym sleep" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                elsif checkrt == 0 && npc.status !~ /dead|gone/
                    pause 0.6
                    put "aim neck" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                    put "sym sleep" if npc.status !~ /dead|gone/
                    put "aim head" if npc.status !~ /dead|gone/
                    put "ambush" if npc.status !~ /dead|gone/
                end
                pause 0.25 if npc.status !~ /dead|gone/
            end
			
		#Empath Routine for Siierra
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Siierra/
			pause 1.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			fput "incant 240" if Spell[240].affordable? && !Spell[240].active?
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if Spell[240].affordable? && !Spell[240].active?
						fput "incant 240"
					elsif npc.name =~ /automaton/ && Spell[1106].affordable?
						fput "incant 1106"
					elsif Spell[1115].affordable?
						fput "incant 1115"
					end
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
			
		#Empath Routine for Maylan
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Maylan/
			pause 0.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active? && (Array[15,20,25].include? UserVars.tdusk[:wave_number])
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if Spell[240].affordable? && !Spell[240].active? && (Array[15,20,25].include? UserVars.tdusk[:wave_number])
						Spell[240].cast
					elsif npc.name =~ /kiramon|beetle|crab|worm/ && Spell[1115].affordable?
						Spell[1115].cast
					elsif Spell[1106].affordable?
						Spell[1106].cast
					end
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
			
		#Empath Routine for Orpius
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Orpius/
			fput "symbol of sleep"
			pause 0.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active? && (Array[15,20,25].include? UserVars.tdusk[:wave_number])
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			if npc.name =~ /kiramon|beetle|crab|worm/ && Spell[1115].affordable?
				Spell[1115].cast
			elsif Spell[1106].affordable?
				Spell[1106].cast
			end
			waitrt?
			fput "stance offensive" if stance != "offensive"
			fput "mstrike #{npc.noun}"
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && npc.status !~ /dead|gone/
					fput "stance offensive" if stance != "offensive"
					fput "attack"
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
			
		#Cleric Routine for Kinsley
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Kinsley/
			pause 0.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active?
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if Spell[240].affordable? && !Spell[240].active?
						Spell[240].cast
					elsif Spell[302].affordable?
						Spell[302].cast
					end
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
		
		#Cleric Routine for Katiesa
		elsif npc.status !~ /dead|gone/ and Char.name =~ /Katiesa/
			pause 0.5
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			Spell[240].cast if Spell[240].affordable? && !Spell[240].active?
			waitrt? if npc.status !~ /dead|gone/
			waitcastrt? if npc.status !~ /dead|gone/
			while npc.status !~ /dead|gone/ && !dead?
				if checkrt == 0 && checkcastrt == 0 && npc.status !~ /dead|gone/
					if Spell[240].affordable? && !Spell[240].active?
						Spell[240].cast
					elsif (Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]) && npc.name !~ /fire|crimson/ && Spell[317].affordable?
						Spell[317].cast
					elsif (Array[16,17,18,19,21,22,23,24].include? UserVars.tdusk[:wave_number]) && npc.name !~ /fire|crimson/  && Spell[317].affordable?
						Spell[317].cast
					elsif Spell[312].affordable?
						Spell[312].cast
					end
				end
				pause 0.25 if npc.status !~ /dead|gone/
			end
			
		elsif !(npc.status =~ /dead|gone/)
			start_script "bigshot", [ "quick" ]
			wait_while {running?("bigshot")}
		end
		put "dismiss #{npc.noun}" if npc.status =~ /dead/
	}
end


def loot(arenarighthand,arenalefthand,scriprummage,scrippouch,waggle_me,pause_me)
	waitrt?
	fput "store #{arenarighthand}" if arenarighthand
	fput "store #{arenalefthand}" if arenalefthand
	pause 1 if (arenarighthand or arenalefthand)
	fput "get package" if arenalefthand && arenarighthand
	pause 5

	fput "open my package" 
	fput "rummage my #{scrippouch}" if scriprummage
	fput "look in my package"
	fput "empty my package into my #{Vars.lootsack}"
	pause 1
	waitrt?
	fput "get bloodscrip from my package" if !scriprummage
	fput "stow bloodscrip" if !scriprummage
	
	if GameObj.right_hand.contents.empty? || GameObj.right_hand.contents.nil?
		fput "drop my package"
	else
		respond "package not empty"
		respond "package not empty"
		respond "package not empty"
		pause_script
	end
	start_script("go2", ["23780"]) 
	wait_while {running?("go2")}
	start_script("waggle") if waggle_me
	wait_while {running?("waggle")}	if waggle_me
	
	# Pause Script so you can socialize, clear mind, mule loot, etc.
	# ;u duskruin
	# to continue
	if pause_me
		echo "PAUSING SCRIPT"
		echo ";u tdusk"
		echo "TO CONTINUE"
		pause_script
	elsif Char.name =~ /Tysong/
		sleep(1) until checkencumbrance == "None"
		sleep(1) until checkmana == maxmana
		#sleep(1) until Spell[9516].timeleft <= 10
	end
	
	sleep(1) until checkmana == maxmana if Char.name =~ /Tysong|Rasko/

	pause 1
	fput "ready #{arenarighthand}" if arenarighthand
	fput "get my #{UserVars.tdusk[:token]} from my #{Vars.lootsack}"
	#start_script("go2", ["23780"])
	#wait_while {running?("go2")}
	fput "go entrance" if !checkgrouped
	sleep(1) until Room.current.id == 24550
	#fput "put my #{UserVars.tdusk[:token]} in my #{Vars.lootsack}" if UserVars.tdusk[:token] =~ /jar|booklet/
	#fput "ready #{arenalefthand}" if arenalefthand
end

#if !(variable[1].downcase =~ /slip|token|jar|booklet/) || variable[1] == nil || variable[1].downcase == "help"
if variable[1].downcase =~ /(slip|token|jar|booklet|voucher)/
	UserVars.tdusk[:token] = $+

elsif variable[1].downcase == "help" || UserVars.tdusk[:token] == nil
	respond "\n
    SYNTAX - ;tdusk <SLIP/TOKEN/BOOKLET/JAR/VOUCHER>
    Start script outside of entrance with your weapons/shield out.
    Uses READY LIST set weapons/shield settings to store/ready between runs.
    Will remember SLIP/TOKEN/BOOKLET/JAR used after first time given.
	
    The Script has several variables that can be set to change behavior. See blow
	
    Waggle Between Runs - Default is set to TRUE
    ;e echo UserVars.tdusk[:waggle_me] = false
	
    Pauses Between Runs - Default is set to TRUE
    ;e echo UserVars.tdusk[:pause_me] = false

    Auto-Enable Enhancives via INV ENHANCIVE ON/OFF - Default is set to FALSE
    ;e echo UserVars.tdusk[:enhancive_me] = true
	
    Uses Duskruin Scrip pouch to rummage collection of scrip. If you don't have one issue the following:
    ;e echo UserVars.tdusk[:scriprummage] = false

    Set your scrip pouch description if different than \"leather pouch\"
    ;e echo UserVars.tdusk[:scrippouch] = \"whatever pouch\"
	
    Active Hunting Scripts (Default to stand & duskruin_watch)
    ;e echo UserVars.tdusk[:activescripts] = ['stand','duskruin_watch','SCRIPT1HERE','SCRIPT2HERE','ETCETCETCETC']
	
    Custom Attack Script In External CHARNAME-duskattack.lic file - Default to FALSE
    ;e echo UserVars.tdusk[:attack_script] = true
	
    SLIPS/TOKENS/JARS/BOOKLETS/VOUCHERS Should be in your lootsack.
    ;VARS SET lootsack=CONTAINERHERE
	
    Uses ;BIGSHOT QUICK for hunting logic. So make sure your bigshot is setup correctly.
        Hunting Tab  - quickhunt targets should be:  (?:.*)
        Commands Tab - quick hunting commands: fill this box with how you want it to attack
        Set everything else up with how you want it.

    Broadcasts time to DUSKRUIN lnet channel when done (Default is true)
    ;e echo UserVars.tdusk[:broadcast] = false"
	exit	
end

before_dying { 
	UserVars.tdusk[:activescripts].each { |activescript|
		kill_script "#{activescript}"
	}
	fput "incant set evoke 903" if Char.name =~ /Tysong/
}

fput "incant set cast 903" if Char.name =~ /Tysong/

if GameObj.right_hand.type =~ /weapon/ || GameObj.right_hand.noun =~/scepter/
	arenarighthand = "weapon"
elsif GameObj.right_hand.type =~ /armor|shield/
	arenarighthand = "shield"
elsif GameObj.right_hand.type == nil
	arenarighthand = nil
end

if GameObj.left_hand.type =~ /weapon/ || GameObj.left_hand.noun =~/scepter/
	arenalefthand = "2weapon"
elsif GameObj.left_hand.type =~ /armor|shield/
	arenalefthand = "shield"
elsif GameObj.left_hand.type == nil
	arenalefthand = nil
end

fput "store #{arenalefthand}" if arenalefthand
pause 1
fput "get my #{UserVars.tdusk[:token]} from my #{Vars.lootsack}"
pause 1
#start_script("go2", ["23780"])
#wait_while {running?("go2")}
fput "go entrance" if !checkgrouped
sleep(1) until Room.current.id == 24550
#fput "put my #{UserVars.tdusk[:token]} in my #{Vars.lootsack}" if UserVars.tdusk[:token] =~ /jar|booklet/
#fput "ready #{arenalefthand}" if arenalefthand

loop {
	line = get
	if line =~ /An announcer shouts\, \"Introducing (?:.*)"/
		fput "put my #{UserVars.tdusk[:token]} in my #{Vars.lootsack}" if UserVars.tdusk[:token] =~ /jar|booklet|voucher/
		fput "ready #{arenalefthand}" if arenalefthand
		UserVars.tdusk[:activescripts].each { |activescript|
			if Script.exists?("#{activescript}")
				Script.start("#{activescript}") if !(Script.running?("#{activescript}"))
				Script.unpause("#{activescript}") if Script.paused?("#{activescript}")
			end
		}
		puts("#{fam_window_begin}DR-Starting Arena\r\n#{fam_window_end}")
		group_size = 3 if checkpcs.count == 2
		group_size = 2 if checkpcs.count == 1
		group_size = 1 if checkpcs.count == nil

		if Char.name =~ /Alasatia|Treeva|Tysong|Altheren/
			waitcastrt?
			Spell[515].cast if Spell[515].affordable? and !Spell[599].active? and !Spell[597].active?
		end
		Spell[240].cast if Spell[240].affordable? && !Spell[240].active? && Char.name =~ /Siierra|Katiesa/
		waitcastrt? if Char.prof =~ /Wizard|Sorcerer|Bard/
		Spell[418].cast if Char.prof =~ /Wizard|Sorcerer/
		Spell[1018].cast if Char.prof =~ /Bard/
		waitcastrt? if Char.prof =~ /Wizard/
		fput "incant 909 evoke" if Spell[909].affordable? and Spell[909].timeleft < 112 and Char.prof =~ /Wizard/ and Char.name !~ /Tysong|Treeva/
		put "inventory enhancive on" if UserVars.tdusk[:enhancive_me]
		put "shout" if group_size == 1
		
	elsif line =~ /An announcer shouts\, \"(?:.*)\"  An iron portcullis is raised and .* (?:enter|enters) the arena\!/
		(start_time = Time.now)	if (line =~ /An announcer shouts\, \"FIGHT\!\"  An iron portcullis is raised and .* (?:enter|enters) the arena\!/)		
		(kill_time  = total_time) if total_time
		total_time = Time.now - start_time
		total_time = total_time.round(2)
		if kill_time
			kill_time = total_time - kill_time
		else
			kill_time = total_time
		end
		(avg_reg = avg_reg + kill_time) if !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
		(avg_champ = avg_champ + kill_time) if Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]
		puts("#{fam_window_begin}#{group_size}v#{group_size} DR-Kills: #{UserVars.tdusk[:wave_number]}, Total Time #{Time.at(total_time).strftime("%M:%S")}, Kill Time: #{Time.at(kill_time).strftime("%M:%S")}\r\n#{fam_window_end}")
		UserVars.tdusk[:wave_number] += 1
		attack(UserVars.tdusk[:wave_number])

	elsif line =~ /An announcer boasts\, \"(?:.*) defeating all those that opposed .* The overwhelming sound of applauding echoes throughout the stands\!/
		(kill_time  = total_time) if total_time
		total_time = Time.now - start_time
		total_time = total_time.round(2)
		if kill_time
			kill_time = total_time - kill_time
		else
			kill_time = total_time
		end
		(avg_reg = avg_reg + kill_time) if !(Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number])
		(avg_champ = avg_champ + kill_time) if Array[5,10,15,20,25].include? UserVars.tdusk[:wave_number]
		avg_reg = avg_reg / 20
		avg_champ = avg_champ / 5
		puts("#{fam_window_begin}#{group_size}v#{group_size} DR-Kills: #{UserVars.tdusk[:wave_number]}, Total Time #{Time.at(total_time).strftime("%M:%S")}, Kill Time: #{Time.at(kill_time).strftime("%M:%S")}\r\n#{fam_window_end}")
		puts("#{fam_window_begin}DR-Winning Time: #{Time.at(total_time).strftime("%M:%S")} \r\n#{fam_window_end}")
		puts("#{fam_window_begin}DR-Avg Reg Kill: #{Time.at(avg_reg).strftime("%M:%S")}, Avg Champ Kill: #{Time.at(avg_champ).strftime("%M:%S")} \r\n#{fam_window_end}")
		send_to_script(lnet_or_0net,"chat on DUSKRUIN #{group_size}v#{group_size} Finished: #{Time.at(total_time).strftime("%M:%S")}, Avg Reg Kill: #{Time.at(avg_reg).strftime("%M:%S")}, Avg Champ Kill: #{Time.at(avg_champ).strftime("%M:%S")}") if UserVars.tdusk[:broadcast]

	elsif line =~ /An arena guard escorts you from the dueling sands/
		put "STOP 1018" if Char.prof =~ /Bard/
		put "inventory enhancive off" if UserVars.tdusk[:enhancive_me]
		UserVars.tdusk[:activescripts].each { |activescript|
			Script.pause("#{activescript}") if Script.running?("#{activescript}") && !Script.paused?("#{activescript}")
		}

	elsif line =~ /Here are your winnings, #{Char.name}./
		start_time = 0
		total_time = 0
		kill_time  = 0
		avg_reg    = 0
		avg_champ  = 0
		UserVars.tdusk[:wave_number] = 0
		loot(arenarighthand,arenalefthand,UserVars.tdusk[:scriprummage],UserVars.tdusk[:scrippouch],UserVars.tdusk[:waggle_me],UserVars.tdusk[:pause_me])
		
	# You've been defeated.  You'll be dragged out of the arena in a moment!  The wards around the arena protect your magic.
	# A gornar-shackled ogre drags you out of the arena.
	elsif line =~ /drags you out of the arena/ || dead?
		respond "dead!!!"
		fput "inventory enhancive off" if UserVars.tdusk[:enhancive_me]
		exit
	end
	
}