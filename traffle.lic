=begin
    Updated version of Raffle Script by Cait to include more information.
    Includes FULL description of ticket, Prize per ticket, and ticket quantity.
    Sorts output according to time.

    ;TRAFFLE

      todo: none
    author: elanthia-online
      name: traffle
      tags: raffle, raffles
   version: 1.8

    changelog:
        1.8 (2018-08-29)
            Added option to delete a raffle from current data set
            ;traffle delete <NUMBER>
        1.7 (2018-03-20)
            Moved to elanthia-online github
        1.6 (2017-10-23)
            Added ;traffle buy to auto buy all known raffles to traffle.
            Does not check for route to locations, uses ;go2 to nav to each one.
        1.5 (2017-10-23)
            Added ;traffle reverse to spit out raffle output in reverse.
        1.4 (2017-10-22)
            Added ;traffle list to spit out raffle output.
        1.3 (2017-10-22)
            Added code to auto-detect all raffles in room and add them, no more having to do each one.
            Please let Tysong know if run into any issues.
        1.2 (2017-10-21)
            Changed output from PUTS command to RESPOND command to fix profanity client output
            Sorts output by time.
        1.1 (2017-10-20)
            Added Total Raffle Count to List
        1.0 (2017-10-20)
            Initial Release

    changelog:
        Caithris - existing raffle script on ;repo
=end
=begin
  Raffletimer v1.99
  Run this script while standing in front of a raffle table.
  All times are local, based on your computer's clock.
  Be sure to check out NishiFront SF skin!
  http://www.gsguide.net/index.php?title=NishiFront
  Updated to work with the new raffle ticket system, by Cait!
  New ;go2 click interface to get to the raffle fast!
=end
=begin
http://rubular.com/r/sTbRMnWXRR
<a\sexist="(?<id>\d+)"\snoun="(?<noun>\w+)">(?<desc>[\w\s]+)<\/a>

=end

debug_my_script = false
if Char.name =~ /Tysong|Ylandra/
	debug_my_script = true
end

look_on_exclusions = ["disk","sign","board","list","kitten","cat","spirit","falcon","placard","rat","wolf","raven","figure","hamster"]

timelimit = 15 #time in minutes to remove old raffles from list
silence_me if !debug_my_script
Settings.load
raffle_data = Settings['raffle_data'].sort_by {|date, ticket, room, time, lichid, price, quantity| time}
if raffle_data == nil
	raffle_data = Array.new
end

timeleft = raffletime = raffleitem = raffle = output = n = roomname = absolute_time = raffle_cost = raffle_tickets = table_description = nil

# pare old raffles
raffle_data.reject! {|raffle| (raffle[3] - Time.now) < (-timelimit*60) }

before_dying {
	Settings['raffle_data'] = raffle_data
	Settings.save
}
if script.vars[0] =~ /clear/ then
	raffle_data=nil
	respond "Raffle entries have been cleared."
	exit
elsif script.vars[0] =~ /delete/ then
	if raffle_data[0]
		echo raffle_data.delete_at(script.vars[2].to_i)
	end
	exit
elsif script.vars[0] =~ /help/ then
	respond "Type ;traffle at a raffle table to keep track of the raffle"
	respond "Type ;traffle <TABLE.DESCRIPTION> to look at a table when 2+ in a room"
	respond ""
	respond "type ;traffle clear to clear the raffle entries"
	respond "type ;traffle help to see this message again"
	exit
elsif script.vars[0] =~ /wiki/ then
	if raffle_data[0]
		n=0
		while raffle_data[n]
			output += "\n==="
			output += "#{raffle_data[n][0]} | #{raffle_data[n][3].strftime("%H:%M")}"
			output += "===\n<pre>"
			output += raffle_data[n][2].to_s
			if raffle_data[n][4] then
				output += "\nLich Room#:"
				output += raffle_data[n][4].to_s
			end
			output += "\n"
			output += "Ticket cost: "
			output += raffle_data[n][5].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
			output += " silvers\nWinners: "
			output += raffle_data[n][6].to_s
			output += "\n"
			output += "Located On: "
			output += raffle_data[n][7].to_s
			output += "\n"
			output += raffle_data[n][1].to_s
			output += "\n</pre>"
			n += 1
		end
		respond output
	else
		respond "No raffles being tracked.  Run this script while at the raffle table!"
		respond "Completed raffles are removed after #{timelimit} minutes."
	end
	exit
elsif script.vars[0] =~ /list|view/ then
	if raffle_data[0]
		output += "================"
		n=0
		while raffle_data[n]
			output += "\n<pushBold/>"
			output += "#{n} - " if debug_my_script
			output += raffle_data[n][0]
			timeleft = raffle_data[n][3] - Time.now
			if timeleft < 0
				output += " (COMPLETED)"
			else
				timeleft = (timeleft / 60).to_i
				output += " ("			
				output += timeleft.to_s
				output += " minutes left)"
			end
			output += "<popBold/>\n"
			output += raffle_data[n][2].to_s
			if raffle_data[n][4] then
				output += " Room#:"
				output += '<d cmd=";go2 ' + raffle_data[n][4].to_s + '">' + raffle_data[n][4].to_s + '</d>'
			end
			output += "\n"
			output += "Ticket cost: "
			output += raffle_data[n][5].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
			output += " silvers | Winners: "
			output += raffle_data[n][6].to_s
			output += "\n"
			output += "Located On: "
			output += raffle_data[n][7].to_s
			output += "\n"
			output += raffle_data[n][1].to_s
			output += "\n"
			n += 1
		end
		output += "================\n"
		output += " #{raffle_data.count} Total Raffles\n"
		output += "================\n"
		_respond output
	else
		_respond "No raffles being tracked.  Run this script while at the raffle table!"
		_respond "Completed raffles are removed after #{timelimit} minutes."
	end
	exit
elsif script.vars[0] =~ /reverse/ then
	raffle_data = raffle_data.sort_by{|date, ticket, room, time, lichid, price, quantity| time}.reverse!
	if raffle_data[0]
		output += "================"
		n=0
		while raffle_data[n]
			output += "\n<pushBold/>"
			output += raffle_data[n][0]
			timeleft = raffle_data[n][3] - Time.now
			if timeleft < 0
				output += " (COMPLETED)"
			else
				timeleft = (timeleft / 60).to_i
				output += " ("			
				output += timeleft.to_s
				output += " minutes left)"
			end
			output += "<popBold/>\n"
			output += raffle_data[n][2].to_s
			if raffle_data[n][4] then
				output += " Room#:"
				output += '<d cmd=";go2 ' + raffle_data[n][4].to_s + '">' + raffle_data[n][4].to_s + '</d>'
			end
			output += "\n"
			output += "Ticket cost: "
			output += raffle_data[n][5].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
			output += " silvers | Winners: "
			output += raffle_data[n][6].to_s
			output += "\n"
			output += "Located On: "
			output += raffle_data[n][7].to_s
			output += "\n"
			output += raffle_data[n][1].to_s
			output += "\n"
			n += 1
		end
		output += "================\n"
		output += " #{raffle_data.count} Total Raffles\n"
		output += "================\n"
		_respond output
	else
		_respond "No raffles being tracked.  Run this script while at the raffle table!"
		_respond "Completed raffles are removed after #{timelimit} minutes."
	end
	exit
elsif script.vars[0] =~ /buy/ then
	total_cost = 0
	starting_room = Room.current.id
	
	raffle_data.each { |raffle|
		total_cost += raffle[5].to_i
	}
	Script.run("go2","bank")
	fput "deposit all"
	fput "withdraw #{total_cost} silver"
	raffle_data.each { |raffle|
		Script.run("go2","#{raffle[4].to_i}")
		fput "buy ticket on #{raffle[7].to_s.split.last}" if raffle[4].to_i == Room.current.id
	}
	Script.run("go2","bank")
	fput "deposit all"
	Script.run("go2","#{starting_room}")
	exit
end

roomname = checkroom
roomid=Room.current.id


script.want_downstream_xml = true
room_objs_total = Array[]
raffles_total = Array[]

line = dothistimeout "look", 1, /^<style id=""\/><style id="roomDesc"\/>.*<a\sexist="(?<id>\d+)"\snoun="(?<noun>\w+)">(?<desc>[\w\s-]+)<\/a>|<compass><\/compass><prompt time=".*">&gt;<\/prompt>|is hovering in mid-air around/
if line =~ /^<style id=""\/><style id="roomDesc"\/>.*<a\sexist="(?<id>\d+)"\snoun="(?<noun>\w+)">(?<desc>[\w\s-]+)<\/a>/
	room_objs_found = line.scan(/<a\sexist="(?<id>\d+)"\snoun="(?<noun>\w+)">(?<desc>[\w\s-]+)<\/a>/)
	room_objs_found.each { |obj_id, obj_noun, obj_desc|
		next if (look_on_exclusions.include? obj_noun)
		room_objs_total.push([obj_id, obj_noun, obj_desc])
	}
end

room_objs_total.each { |table_id, table_noun, table_desc|
	line = dothistimeout "look on ##{table_id.to_i}", 1, /<a\sexist="(?<id>\d+)"\snoun="tickets">(?<desc>[\w\s]+)<\/a>|There is nothing on there\./
	if line =~ /<a\sexist="(?<id>\d+)"\snoun="tickets">(?<desc>[\w\s]+)<\/a>/
		raffle_found = line.scan(/<a\sexist="(?<id>\d+)"\snoun="tickets">(?<desc>[\w\s]+)<\/a>/)
		raffle_found.each { |raffle_id, raffle_desc|
			raffles_total.push([raffle_id, raffle_desc, table_desc])
		}
	elsif line =~ /^<prompt time=".*">&gt;<\/prompt>$/
		break
	end
}
script.want_downstream_xml = false

if debug_my_script
	room_objs_total.each { |obj|
		echo "Room Objs Found: #{obj}"
	} if debug_my_script
	raffles_total.each { |raffle|
		echo "Raffles Found:   #{raffle}"
	}
end
#exit

pause 0.5

if raffles_total
	raffles_total.each { |raffle_id, raffle_desc, table_desc|
		timeleft = raffletime = raffleitem = raffle = output = absolute_time = raffle_cost = raffle_tickets = table_description = nil
		fput "look at ##{raffle_id.to_i}"
		loop {
			line = get
	#		echo line
			if line =~ /The drawing will be in (?:.*) for (.*) (?:winner|winners)\./
				raffle_tickets = $1
			end

			if line =~ /I could not find what you were referring to./
				timeleft = 0
				break
			elsif line =~ /The drawing has been held with the following winner/
				timeleft = 0
				break
			elsif line =~ /The drawing will be in ([0-9]+) (minute|minutes)/
				timeleft += $1.to_i * 60
				break
			elsif line =~ /The drawing will be in ([0-9]+) (hour|hours) and ([0-9]+) (minute|minutes)/
				timeleft += ($1.to_i * 3600) + ($3.to_i * 60)
				break
			end

			if line =~ /^The raffle is for (.*)/
				raffleitem = $1
			elsif line =~ /^Raffle for (.*)/	
				raffleitem = $1
			elsif line =~ /^This raffle is (.*)/
				raffleitem = $1
			elsif line =~ /^The raffle for (.*)/
				raffleitem = $1
			elsif line =~ /raffle will receive (.*)/
				raffleitem = $1
			elsif line =~ /winner will receive (.*)/
				raffleitem = $1
			end

			if line =~ /^The tickets sell for (.*) silvers each./
				raffle_cost = $1
			end
	
			if line =~ /the drawing will be held on (.+)elven standard time \((.+)\)\./
				datestring=$2; 
				date = Time.parse(datestring); 
				timeleft=(date-Time.now).to_i; 
				break
			end
		}
		table_description = table_desc
		raffletime = absolute_time = Time.now + timeleft
		prettydate = raffletime.strftime("%A, %B %e, %Y at %I:%M %p")
		unless raffleitem==nil
			#raffleitem=raffleitem.split('.').first()
			if raffle_data.rassoc(raffleitem)
				raffle_data.reject! {|raffle| raffle[1] == raffleitem && raffle[2] == roomname && (raffle[3] - absolute_time).abs < 60}
				raffle_data.push ([prettydate, raffleitem, roomname, absolute_time, roomid, raffle_cost, raffle_tickets, table_description])
			elsif timeleft != 0
				raffle_data.push ([prettydate, raffleitem, roomname, absolute_time, roomid, raffle_cost, raffle_tickets, table_description])
			end
		end
	}
end


if raffle_data[0]
	output += "================"
	n=0
	while raffle_data[n]
		output += "\n<pushBold/>"
		output += raffle_data[n][0]
		timeleft = raffle_data[n][3] - Time.now
		if timeleft < 0
			output += " (COMPLETED)"
		else
			timeleft = (timeleft / 60).to_i
			output += " ("			
			output += timeleft.to_s
			output += " minutes left)"
		end
		output += "<popBold/>\n"
		output += raffle_data[n][2].to_s
		if raffle_data[n][4] then
			output += " Room#:"
			output += '<d cmd=";go2 ' + raffle_data[n][4].to_s + '">' + raffle_data[n][4].to_s + '</d>'
		end
		output += "\n"
		output += "Ticket cost: "
		output += raffle_data[n][5].to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
		output += " silvers | Winners: "
		output += raffle_data[n][6].to_s
		output += "\n"
		output += "Located On: "
		output += raffle_data[n][7].to_s
		output += "\n"
		output += raffle_data[n][1].to_s
		output += "\n"
		n += 1
	end
	output += "================\n"
	output += " #{raffle_data.count} Total Raffles\n"
	output += "================\n"
	_respond output
else
	_respond "No raffles being tracked.  Run this script while at the raffle table!"
	_respond "Completed raffles are removed after #{timelimit} minutes."
end
