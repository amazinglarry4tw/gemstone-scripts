=begin
	AFTER DOWNLOADING THIS SCRIPT BE SURE TO DO THIS:
	
	;autostart add --global dreavening
	
	TO MAKE SURE YOUR DREAVENING SCRIPT AUTOSTARTS AT STARTUP.
	
	Script to help cut down on the screen scroll during the Dreavenings. Just leave this script running in the background and when the Dreavening starts it will automatically squelch spell preps and casting of Dreaven's characters as well as spell buff messaging. As soon as the Dreavening is finished the script will stop squelching these lines, or at anytime you can simply kill this script and it will stop squelching messages as well.

	This only squelches the spell preps/casts of Dreaven's characters during the Dreavening.

	This script will allow you to still enjoy the Dreavening without the screen scroll if it bothers you. Some people may prefer to see the craziness of all the scrolling. The choice is YOURS!
	
	Run the setup menu by doing:
	
	;dreavening setup
	
	To fill out all of the features this script has to offer; including the ability to have the script automatically send mana for you, automatically use wracking, sigil of power, symbol of mana, and more!
	
	For the familiar timer window once your familiar window is setup to be a countdown timer simply open up your familiar window and the timer will update every minute. This script will automatically get the time whenever the next Dreavening time is announced on the Prime or Dreavening channel. It's just like magic!
	
	Additional commands:
	
	Simply enter 'running' while this script is running to automatically run to Dreaven's table.
	
	Enter 'autosend' while this script is running to engage the auto send feature. This is case the script didn't start the autosend on its own for whatever reason.
	
	Tip commands. Since someone has made it their mission to intercept tips meant for Dreaven by making characters similar to Dreaven these nifty tip features will assure the tip gets to the right person.
	
	Simply do any of the following commands directly into the game window while the ;dreavening script is running.
	
	tip will give Dreaven whatever is in your right hand.
	
	tip nameofitem will give Dreaven whatever item you specify (example tip diamond, tip cookie, etc)
	
	tip amounthere will give Dreaven the specified amount of silvers (tip 1000, tip 10000, etc)
	
	Author:  Tgo01
	Version:  94

=end

stuff_to_give = nil
tip_amount = nil
person_chose_who_to_send_mana_to = nil
silence_all = nil
pre_squelch_running = nil
reserve_mana_amount = nil
amount_to_send = nil
total_saved_mana_amount = nil
figure_out_how_much_mana_to_send = nil

CharSettings['setup_has_been_run'] = nil unless CharSettings['setup_has_been_run']

setup = proc{
	CharSettings['setup_has_been_run'] = true
	Gtk.queue {
		$BBB_WINDOW = Gtk::Window.new
		$BBB_WINDOW.title = "dreavening"
		$BBB_WINDOW.set_border_width(10)
		$BBB_BOX = Gtk::VBox.new(false)
		$BBB_BOX.set_border_width(5)

		$BBB_VERTICAL_BOX1 = Gtk::VBox.new(false, 0)
		$BBB_VERTICAL_BOX2 = Gtk::VBox.new(false, 0)
		$BBB_VERTICAL_BOX3 = Gtk::VBox.new(false, 0)

		$BBB_WINDOW.add($BBB_BOX)
		$BBB_NOTEBOOK = Gtk::Notebook.new
		$BBB_NOTEBOOK.set_show_border(true)
		$BBB_BOX.add($BBB_NOTEBOOK)
		$BBB_NOTEBOOK.append_page($BBB_VERTICAL_BOX1, Gtk::Label.new('Mana Sharing'))
		$BBB_NOTEBOOK.append_page($BBB_VERTICAL_BOX2, Gtk::Label.new('Society Abilities'))
		$BBB_NOTEBOOK.append_page($BBB_VERTICAL_BOX3, Gtk::Label.new('Other Options'))
		$BBB_ENTRY = Hash.new 
		$BBB_TABLE_SIZE = Hash.new
	}

	Gtk.queue {
		$BBB_TABLE1 = Gtk::Table.new(6, 3, false)
		$BBB_TABLE1.row_spacings=3
		$BBB_TABLE1.column_spacings=3
		$BBB_VERTICAL_BOX1.pack_start($BBB_TABLE1, false, false, 0)

		$BBB_TABLE2 = Gtk::Table.new(6, 3, false)
		$BBB_TABLE2.row_spacings=3
		$BBB_TABLE2.column_spacings=3
		$BBB_VERTICAL_BOX2.pack_start($BBB_TABLE2, false, false, 0)

		$BBB_TABLE3 = Gtk::Table.new(6, 3, false)
		$BBB_TABLE3.row_spacings=3
		$BBB_TABLE3.column_spacings=3
		$BBB_VERTICAL_BOX3.pack_start($BBB_TABLE3, false, false, 0)
	}

	def self.add_label_entry(table, label, variable)
		size = $BBB_TABLE_SIZE[table] || 0

		label = Gtk::Label.new(label)
		align = Gtk::Alignment.new 1, 0, 0, 0
		align.set_padding(4, 0, 3, 4)
		align.add(label)
		table.attach(align, 0, 1, size, size + 1)

		entry = Gtk::Entry.new
		entry.text = UserVars.dreavening[variable].to_s
		entry.set_width_request(157)
		table.attach(entry, 1, 2, size, size + 1)

		$BBB_ENTRY[variable] = entry
		$BBB_TABLE_SIZE[table] += 1
	end

	Gtk.queue {
		$BBB_ENTRY = Hash.new
		add_label_entry($BBB_TABLE1, "Auto send mana:", 'auto_send_mana')
		add_label_entry($BBB_TABLE1, "Send mana to:", 'send_mana_to')
		add_label_entry($BBB_TABLE1, "Wait time:", 'wait_time')
		add_label_entry($BBB_TABLE1, "Stop singing:", 'stop_singing')
		add_label_entry($BBB_TABLE1, "Reserve Mana:", 'reserve_mana')
		add_label_entry($BBB_TABLE2, "Auto Wrack:", 'auto_wrack')
		add_label_entry($BBB_TABLE2, "Sigil of Concentration:", 'sigil_of_concentration')
		add_label_entry($BBB_TABLE2, "Sigil of Power:", 'sigil_of_power')
		add_label_entry($BBB_TABLE2, "Symbol of Mana:", 'symbol_of_mana')
		add_label_entry($BBB_TABLE3, "Timer window:", 'timer_window')
		add_label_entry($BBB_TABLE3, "Squelch all:", 'squelch_all')
		add_label_entry($BBB_TABLE3, "Pre-Squelch:", 'pre_squelch')
	}

	def self.add_checkbox(table, x_pos, label, variable, default = false)
		size = $BBB_TABLE_SIZE[table] || 0
		checkbox = Gtk::CheckButton.new label
		value = UserVars.dreavening[variable].nil? ? default : UserVars.dreavening[variable]
		checkbox.set_active(value)
		table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
		$BBB_ENTRY[variable] = checkbox
		$BBB_TABLE_SIZE[table] += 1 if x_pos == 1
	end
        
	Gtk.queue {
		$BBB_WINDOW.signal_connect("delete_event") {
			$BBB_SETUP_COMPLETED = true
		}
	}
        
	Gtk.queue {
		$BBB_TOOLTIPS = Gtk::Tooltips.new
		$BBB_TOOLTIPS.enable

		label = Gtk::Label.new
		label.set_markup("Leave line blank for any setting you don't want to use.\n<b>Auto send mana:</b> Enter <b>yes</b> to have script automatically send mana during a Dreavening.\n<b>Send mana to:</b> Enter names of all Dreaven's characters you want to send to, or leave blank to have the script do this automatically.\nSeparate each name with a single space. Script will send mana to each person in order.\nCharacters who can receive mana: Dreaven, Ryjin, Vonaq, Bochser, Najash, Ardque, Dravnib, Snooshezis, Fulvus, Kholac\n<b>Wait time:</b> Enter how many seconds to wait between send attempts. Enter whole numbers, for example 4. Minimum is 3.\n<b>Stop singing: </b> Enter <b>yes</b> if you're a bard and you want the script to stop singing your spell songs.\n<b>Reserve Mana:</b> Enter amount of mana you want autosend to reserve, useful for bards so they don't fry their nerves with their songs renewing.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$BBB_TABLE1.attach(align, 1, 2, 9, 10)

		label = Gtk::Label.new
		label.set_markup("Leave line blank for any setting you don't want to use.\n<b>Auto Wrack:</b> Enter <b>yes</b> to auto wrack. Script is careful not to spirit death you.\n<b>Sigil of Concentration:</b> Enter <b>yes</b> to automatically keep Sigil of Concentration active during a Dreavening.\n<b>Sigil of Power:</b> Enter <b>yes</b> to automatically use Sigil of Power to regain mana when needed.\n<b>Symbol of Mana:</b> Enter <b>yes</b> to automatically use Symbol of Mana to regain mana when needed.\nThis only uses Symbol of Mana outside of the cooldown and won't use deeds.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$BBB_TABLE2.attach(align, 1, 2, 8, 9)
		
		label = Gtk::Label.new
		label.set_markup("<b>Timer window:</b> Enter <b>yes</b> to turn your familiar window into a Dreavening countdown timer.\nYou will lose functionality with your familiar window with this option.\n<b>Squelch all:</b> Enter <b>yes</b> to squelch EVERYTHING except for says and whispers during a Dreavening. Yes, EVERYTHING.\n<b>Pre-Squelch:</b> Enter <b>yes</b> to squelch while at the Dreavening table with Dreaven. This will also use squelch all if you have that option enabled.\nThe squelching will end shortly after leaveing Dreaven's table.")
		align = Gtk::Alignment.new(1, 0, 0, 0)
		align.set_padding(50, 0, 0, 40)
		align.add(label)
		$BBB_TABLE3.attach(align, 1, 2, 8, 9)

		$BBB_WINDOW.show_all
	}
        
	$BBB_SETUP_COMPLETED = false
	until($BBB_SETUP_COMPLETED)
		sleep 1
	end
       
	UserVars.dreavening ||= Hash.new
	$BBB_ENTRY.keys.each { |key|
		if( $BBB_ENTRY[key].class.to_s =~ /CheckButton/ )
			value = $BBB_ENTRY[key].active?
			UserVars.dreavening[key] = $BBB_ENTRY[key].active?
		else
			if(key == 'wounded_eval')
				UserVars.dreavening[key] = $BBB_ENTRY[key].text
			else
				UserVars.dreavening[key] = $BBB_ENTRY[key].text.strip.downcase
			end
		end
	}
	UserVars.save()
        
	Gtk.queue {
		$BBB_WINDOW.destroy
	}
}

if script.vars[1] == "setup"
	setup.call
	exit
end

wait_until { running? "infomon" }
sleep 5

reserve_mana_amount = UserVars.dreavening["reserve_mana"].to_i if UserVars.dreavening["reserve_mana"].length > 0

if UserVars.dreavening["send_mana_to"].length > 1
	person_chose_who_to_send_mana_to = true
else
	person_chose_who_to_send_mana_to = nil
end

wait_time = UserVars.dreavening["wait_time"].to_i
wait_time = 3 if wait_time < 4

people_to_send_to = "#{UserVars.dreavening["send_mana_to"]}".split(" ")

toggle_upstream

last_share_value = 0

all_shares = {
	'Dreaven'		=> { :smc => 202, :emc => 24,  :mmc => 202 },
	'Najash'		=> { :smc => 101, :emc => 0,   :mmc => 0   },
	'Ardque'		=> { :smc => 101, :emc => 101, :mmc => 0   },
	'Fulvus'		=> { :smc => 50,  :emc => 0,   :mmc => 0   },
	'Kholac'		=> { :smc => 30,  :emc => 0,   :mmc => 0   },
	'Ryjin'			=> { :smc => 101, :emc => 48,  :mmc => 0   },
#	'Dravnib'		=> { :smc => 10,  :emc => 0,   :mmc => 0   },
	'Bochser'		=> { :smc => 0,   :emc => 202, :mmc => 0   },
	'Vonaq'			=> { :smc => 0,   :emc => 0,   :mmc => 101 },
	'Snooshezis'	=> { :smc => 0,   :emc => 0,   :mmc => 25  },
}

best_shares = {
	'Dreaven'		=> 0,
	'Najash'		=> 0,
	'Ardque'		=> 0,
	'Fulvus'		=> 0,
	'Kholac'		=> 0,
	'Ryjin'			=> 0,
#	'Dravnib'		=> 0,
	'Bochser'		=> 0,
	'Vonaq'			=> 0,
	'Snooshezis'	=> 0,
}

all_shares.each{ |key,value|
	if key == "Dreaven"
		best_shares['Dreaven'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Dreaven'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Dreaven'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Dreaven'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Dreaven'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Dreaven'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Najash"
		best_shares['Najash'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Najash'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Najash'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Najash'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Najash'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Najash'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Ardque"
		best_shares['Ardque'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Ardque'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Ardque'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Ardque'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Ardque'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Ardque'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Fulvus"
		best_shares['Fulvus'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Fulvus'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Fulvus'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Fulvus'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Fulvus'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Fulvus'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Kholac"
		best_shares['Kholac'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Kholac'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Kholac'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Kholac'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Kholac'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Kholac'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Ryjin"
		best_shares['Ryjin'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Ryjin'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Ryjin'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Ryjin'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Ryjin'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Ryjin'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
#	elsif key == "Dravnib"
#		best_shares['Dravnib'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Dravnib'] && Skills.smc > 0 && all_shares[key][:smc] > 0
#		best_shares['Dravnib'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Dravnib'] && Skills.emc > 0 && all_shares[key][:emc] > 0
#		best_shares['Dravnib'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Dravnib'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Bochser"
		best_shares['Bochser'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Bochser'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Bochser'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Bochser'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Bochser'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Bochser'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Vonaq"
		best_shares['Vonaq'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Vonaq'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Vonaq'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Vonaq'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Vonaq'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Vonaq'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	elsif key == "Snooshezis"
		best_shares['Snooshezis'] = Skills.smc + all_shares[key][:smc] if Skills.smc + all_shares[key][:smc] > best_shares['Snooshezis'] && Skills.smc > 0 && all_shares[key][:smc] > 0
		best_shares['Snooshezis'] = Skills.emc + all_shares[key][:emc] if Skills.emc + all_shares[key][:emc] > best_shares['Snooshezis'] && Skills.emc > 0 && all_shares[key][:emc] > 0
		best_shares['Snooshezis'] = Skills.mmc + all_shares[key][:mmc] if Skills.mmc + all_shares[key][:mmc] > best_shares['Snooshezis'] && Skills.mmc > 0 && all_shares[key][:mmc] > 0
	end
}

best_shares = best_shares.sort_by{|key,value| value}.reverse

currently_meditating = nil #As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
next_dreavening_seconds = nil
next_dreavening_minutes = nil
next_dreavening_start = nil
update_no_schedule_timer = true
dreavens_characters = "(Dreaven|Ryjin|Vonaq|Bochser|Najash|Ardque|Iteno|Dravnib|Snooshezis|Fulvus|Kholac|Nevaerd)"
send_mana = nil
add_up_spirit_costs = nil
total_spirit_cost = 0
send_that_mana = nil

master_squelch_list = /Nothing happens\.|A small spark leaps from your fingers\.\.\. but little else happens\.|You suddenly hear the voices of nature fill your mind\.|appears to be listening intently to something\.|seems slightly different\.|seems hesitant\, looking unsure of|appears less confident\.|appears less battle\-ready as a soft glow dissipates from around .* form\.|The barrier of force around .* dissipates\.|appears more secure\.|The brilliant aura fades away from|A misty halo surrounds|fingers\.\.\. but little else happens\.|suddenly stops moving light\-footedly|movements no longer appear to be influenced by a divine power as the spiritual force fades from around .* arms\.|The air stops shimmering around|spirits are no longer lifted\.|opens .* eyes\, looking slightly drained\.|eyes and begins chanting\.  Suddenly\, a small bolt of energy arcs between them\!|muscles seem to strain for an instant\.  A sense of loss can be seen in .* eyes\.|suddenly looks drained\!|blends into invisibility among the surroundings\.|You suddenly feel much more dextrous\.|You seem to blend into the surroundings better\.|Dravnib.* adjusts your .*\, improving its ability to support the weight of your gear\.|A faint disk appears next to you\, but then fades away\.|A whirl of spiritual energy streaks down from above\, creating a dully illuminated mantle around your form\.|You suddenly feel more powerful\.|Opening your mind\'s eye to the progression of time\, a myriad of possible future events fills your consciousness\.|#{dreavens_characters}.* suddenly appears less powerful\.|looks less calm and refreshed than a moment ago\.|A sense of peace and calm resettles over the area\.|#{dreavens_characters}.* gestures\.|#{dreavens_characters}.* makes a complex gesture\.|Your form blurs\.|#{dreavens_characters}.* gestures? at .*\.|A .* luminescence surrounds .*\.|Bochser.* wrings .*his.* hands\.|#{dreavens_characters}.* appears considerably more powerful\.|A faint disk appears next to .*\, but then fades away\.|A small circular container suddenly appears and floats rather serenely over to .*\.|Glowing specks of light red energy begin to spin around .*\.|looks considerably more imposing\.|A dim aura surrounds .*\.|A .* blue glow surrounds .*\.|suddenly looks more powerful\.|A whirl of spiritual energy streaks down from above\, creating a dully illuminated mantle around .*\'s.* form\.|Eyes widening momentarily\, .* gazes into the distance before adopting a thoughtful expression\.|The air about .* shimmers slightly\.|suddenly looks much more dextrous\.|Dravnib.* adjusts .*\'s.*\, improving its ability to support the weight of .* gear\.|lines spirals outward from the center of|Your spirits are no longer lifted by stories of Kai\'s Triumphs\.|light burns in .*\'s eyes\.|light sparks in .*\'s eyes\.|You feel less drained\.|When the song ends\, you notice .* little more and is void of some natural imperfections\./

send_that_mana = proc{
	Spell[9714].cast if UserVars.dreavening["sigil_of_concentration"] =~ /yes/i && Spell[9714].known? && Spell[9714].affordable? && !Spell[9714].active?
	if person_chose_who_to_send_mana_to
		people_to_send_to.each {|i|
			figure_out_how_much_mana_to_send.call
			put "send #{amount_to_send} #{i}" if checkmana(total_saved_mana_amount)
			sleep 0.5
		}
	else
		last_share_value = 0
		best_shares.each{|key,value|
			if checkmana(total_saved_mana_amount) && value > 0
				if ((value + 30) > last_share_value) || (value > 40)
					figure_out_how_much_mana_to_send.call
					waitrt?
					put "send #{amount_to_send} #{key}" if checkmana(total_saved_mana_amount)
					last_share_value = value
					sleep 0.5
				end
			end
		}
	end
}

add_up_spirit_costs = proc{
	total_spirit_cost = 0
	total_spirit_cost += 1 if Spell[9912].active? #Sign of Swords
	total_spirit_cost += 1 if Spell[9913].active? #Sign of Shields
	total_spirit_cost += 1 if Spell[9914].active? #Sign of Dissipation
	total_spirit_cost += 3 if Spell[9916].active? #Sign of Madness
}

silence = proc {
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if server_string =~ /Mirage\-like distortions surround .*#{dreavens_characters}.* as .* prepares a spell\.\.\./
			nil
		elsif server_string =~ master_squelch_list
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence", action)
}

silence2 = proc{
	action = proc { |server_string|
		if server_string =~ /Please rephrase that command\./
			DownstreamHook.remove("#{script.name}_silence2")
			nil
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_silence2", action)
}

silence_all = proc{
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
		if server_string =~ /Mirage\-like distortions surround .*#{dreavens_characters}.* as .* prepares a spell\.\.\./
			nil
		elsif server_string =~ master_squelch_list
			nil
		elsif server_string =~ /\<a exist\=\".*\" noun\=\".*\"/i && server_string !~ /whisper|yells|recite|sing|say|exclaim|ask|roshambo|You make the symbol for|makes the symbol for|You and .* pound your fists in your open palms three times\.\.\.|\.\.\.It\'s a tie\!|\.\.\..* wins\!|\.\.\.You win\!|You notice|Also here\:|\<style/i
			nil
		else
			server_string
		end
	}
		DownstreamHook.add("#{script.name}_silence_all", action)
}

hook_proc = proc { |string|
	if string =~ /sign of hy|sign of he|sign of p|sign of wr|sign of da/i
		echo "A DREAVENING IS GOING ON AND YOU HAVE SET THIS SCRIPT TO AUTOMATICALLY WRACK WHEN NEEDED! I WON'T ALLOW YOU TO USE THIS SIGN!"
		nil
	else
		string
	end
}

hook_proc_tip = proc{ |string|
	if string =~ /^\<c\>give dre([a-zA-Z]+)? \d+/i && checkroom =~ /table/i
		temp_string = string
		temp_string = temp_string.split(" ")
		stuff_to_give = nil
		temp_string.each {|i|
			if i =~ /dre([a-zA-Z]+)?/i
				stuff_to_give += "Dreaven "
			elsif i =~ /\<c\>/
				stuff_to_give += "give "
			else
				stuff_to_give += "#{i} "
			end
		}
		if checkpcs.include?("Dreaven") 
			put "#{stuff_to_give}"
		else
			echo "In order to combat fake Dreavens the ;dreavening script assumes doing 'give dre' while at a table means you are trying to give Dreaven something. If you are indeed trying to give something to someone whose name starts with Dre and is not Dreaven please do ;kill dreavening then proceed. Remember to ;dreavening again afterwards."
		end
		nil
	elsif string =~ /^\<c\>give dre([a-zA-Z]+)?/i && checkroom =~ /table/i
		if checkpcs.include?("Dreaven") 
			put "give dreaven"
		else
			echo "In order to combat fake Dreavens the ;dreavening script assumes doing 'give dre' while at a table means you are trying to give Dreaven something. If you are indeed trying to give something to someone whose name starts with Dre and is not Dreaven please do ;kill dreavening then proceed. Remember to ;dreavening again afterwards."
		end
		nil
	elsif string =~ /^\<c\>give (.*) to dre([a-zA-Z]+)?/i && checkroom =~ /table/i
		temp_string = string
		temp_string = temp_string.split(" ")
		stuff_to_give = nil
		temp_string.each {|i|
			if i =~ /dre([a-zA-Z]+)?/i
				stuff_to_give += "Dreaven"
			elsif i =~ /\<c\>/
				stuff_to_give += "give "
			else
				stuff_to_give += "#{i} "
			end
		}
		if checkpcs.include?("Dreaven") 
			put "#{stuff_to_give}"
		else
			echo "In order to combat fake Dreavens the ;dreavening script assumes doing 'give dre' while at a table means you are trying to give Dreaven something. If you are indeed trying to give something to someone whose name starts with Dre and is not Dreaven please do ;kill dreavening then proceed. Remember to ;dreavening again afterwards."
		end
		nil
	else
		string
	end
}

figure_out_how_much_mana_to_send = proc{
	if reserve_mana_amount
		amount_to_send = checkmana - reserve_mana_amount
		total_saved_mana_amount = reserve_mana_amount + 20
	else
		amount_to_send = checkmana
		total_saved_mana_amount = 20
	end
}

before_dying { 
	DownstreamHook.remove("#{script.name}_silence")
	DownstreamHook.remove("#{script.name}_silence2")
	DownstreamHook.remove("#{script.name}_silence_all")
	UpstreamHook.remove('no_spirit_death')
	UpstreamHook.remove('proper_tip')
}

if UserVars.dreavening["auto_send_mana"] =~ /yes/i
	Thread.new{
		loop{
			wait_until { send_mana }
			waitrt?
			put "stop singing" if UserVars.dreavening["stop_singing"] =~ /yes/i && Char.prof == "Bard"
			loop{
				if UserVars.dreavening["auto_wrack"] =~ /yes/i && Spell[9918].known?
					if !Spell[9012].active?
						add_up_spirit_costs.call
						total_spirit_check = total_spirit_cost + 5
						wait_until { checkmana(total_saved_mana_amount) || checkspirit > total_spirit_check }
						(break) if (send_mana.nil?)
						waitrt?
						send_that_mana.call if !hiding? && currently_meditating == nil
						if checkspirit > total_spirit_check && (maxmana * 0.10).floor > checkmana && send_mana
							until hiding?
								waitrt?
								put "hide"
								sleep 0.3
							end
							waitrt?
							put "sign of wracking" if send_mana
							until !hiding?
								waitrt?
								put "unhide"
								sleep 0.3
							end
							until standing?
								waitrt?
								put "stand"
								sleep 0.3
							end
							send_that_mana.call
						end
					end
				else
					Spell[9718].cast if UserVars.dreavening["sigil_of_power"] =~ /yes/i && Spell[9718].known? && Spell[9718].affordable? && checkmana < (maxmana - 25)
					Spell[9813].cast if UserVars.dreavening["symbol_of_mana"] =~ /yes/i && Spell[9813].known? && Spell[9813].affordable? && !Spell[9048].active? && checkmana < (maxmana - 50)
					wait_until { checkmana(total_saved_mana_amount) }
					(break) if (send_mana.nil?)
					waitrt?
					send_that_mana.call if !hiding?
				end
				sleep wait_time
				(break) if (send_mana.nil?)
			}
		}
	}
end

if CharSettings['setup_has_been_run'] == nil
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "You must run setup before you can use this script. Type ;dreavening setup"
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	echo "ALSO DO ;autostart add --global dreavening TO MAKE SURE YOUR ;dreavening SCRIPT RUNS AT STARTUP."
	exit
end

Thread.new{
	loop{
		command = upstream_get
		if command =~ /^\<c\>running/i
			silence2.call
			kill_script "go2" if running? "go2"
			until Room.current.id == 3619
				start_script "go2", [3619]
				wait_while { running? "go2" }
				waitrt?
				sleep 1
			end
			until Room.current.id != 3619
				put "go iteno table"
				sleep 1
				break if Room.current.id != 3619
				put "go iteno table"
				sleep 1
				break if Room.current.id != 3619
				sleep 5
			end
		elsif command =~ /^\<c\>autosend/i
			silence2.call
			if checkroom !~ /table/i && Room.current.id != 3619
				echo "This feature only works at the Wayside Inn and you apparently aren't there at the moment."
			elsif UserVars.dreavening["auto_send_mana"] =~ /yes/i
				echo "Autosend activated!"
				send_mana = true
			else
				echo "You need to run ;dreavening setup and enter 'yes' in the 'Auto send mana' field to use this feature."
			end
		elsif command =~ /^\<c\>tip$/i
			silence2.call
			if checkright
				put "give #{checkright} to Dreaven"
			else
				echo "Doing just \"tip\" attempts to give Dreaven whatever is in your right hand. If you want to specify an item do \"tip itemname\"."
			end
		elsif command =~ /^\<c\>tip ([a-zA-Z]+)$/i
			silence2.call
			put "give #{$1} to Dreaven"
		elsif command =~ /^\<c\>tip (\d+)$/i
			silence2.call
			tip_amount = $1.to_i
			put "give dreaven #{tip_amount} silvers"
		end
	}
}

Thread.new{ #As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
loop{
		wait_until { Spell[9075].active? }
		currently_meditating = true
		wait_until { !Spell[9075].active? }
		currently_meditating = nil
		sleep 1
	}
}

Thread.new{
	loop{
		if checkroom !~ /table/i && Room.current.id != 3619
			send_mana = nil
			DownstreamHook.remove("#{script.name}_silence")
			DownstreamHook.remove("#{script.name}_silence2")
			DownstreamHook.remove("#{script.name}_silence_all")
			UpstreamHook.remove('no_spirit_death')
			pre_squelch_running = nil
		end
		if UserVars.dreavening["pre_squelch"] =~ /yes/i && pre_squelch_running == nil
			if GameObj.pcs.find{|pc| pc.noun == "Dreaven"} && checkroom =~ /table/i
				pre_squelch_running = true
				if UserVars.dreavening["squelch_all"] =~ /yes/i
					silence_all.call
				else
					silence.call
				end
			end
		end
		sleep 5
	}
}

if UserVars.dreavening["timer_window"] =~ /yes/i
	if $frontend == 'stormfront'
		fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
		fam_window_end   = "<popStream/>\r\n"
	else
		fam_window_begin = "\034GSe\r\n"
		fam_window_end   = "\034GSf\r\n"
	end
	Thread.new{
		loop{
			100.times{puts("#{fam_window_begin}\r\n#{fam_window_end}")}
			if next_dreavening_minutes == nil
				if update_no_schedule_timer
					puts("#{fam_window_begin}No Dreavening is scheduled.\r\n#{fam_window_end}")
					update_no_schedule_timer = nil
				end
			elsif next_dreavening_minutes < 1
				puts("#{fam_window_begin}Next Dreavening any minute now!\r\n#{fam_window_end}")
			else
				puts("#{fam_window_begin}Next Dreavening is in #{next_dreavening_minutes} minutes at #{next_dreavening_start.strftime("%m/%d/%Y at %I:%M %p")}.\r\n#{fam_window_end}")
			end
			sleep 60
			next_dreavening_minutes -= 1
		}
	}
end

UpstreamHook.add('proper_tip', hook_proc_tip)

while line = get
	if line =~ /^Dreaven exclaims\, \"Let the spells fly\!\"$|^You exclaim\, \"Let the spells fly\!\"$/
		send_mana = true
		Spell[9714].cast if UserVars.dreavening["sigil_of_concentration"] =~ /yes/i && Spell[9714].known? && Spell[9714].affordable? && !Spell[9714].active?
		pre_squelch_running = true
		if UserVars.dreavening["squelch_all"] =~ /yes/i
			silence_all.call
		else
			silence.call
		end
		UpstreamHook.add('no_spirit_death', hook_proc) if UserVars.dreavening["auto_wrack"] =~ /yes/i && Spell[9918].known?
	elsif line =~ /^You kneel down and begin to meditate on your lot in life\.|^You begin to meditate on your lot in life\./#As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
		currently_meditating = true
	elsif line =~ /^You wake from your meditation\, yet a deep feeling of relaxation remains present\./#As of the writing of this script, ;spell-list.xml does not track when someone is currently experiencing the benefits of meditating.
		currently_meditating = nil
	elsif line =~ /^Dreaven exclaims\, \"That\'s everything\!\"$|^You exclaim\, \"That\'s everything\!\"$/
		fput "spell active"
		send_mana = nil
		DownstreamHook.remove("#{script.name}_silence")
		DownstreamHook.remove("#{script.name}_silence2")
		DownstreamHook.remove("#{script.name}_silence_all")
		UpstreamHook.remove('no_spirit_death')
		pre_squelch_running = nil
	elsif line =~ /^Dreaven says\, \"We will be starting soon\.\"/ && checkname !~ /Dreaven|Ryjin|Vonaq|Bochser|Najash|Ardque|Iteno|Dravnib|Snooshezis|Fulvus|Kholac|Nevaerd/
		waitrt?
		fput "disband"
		fput "leave"
		fput "group open"
		until standing?
			waitrt?
			fput "stand"
			sleep 0.3
		end
	elsif line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"No Dreavening is scheduled\./i
		next_dreavening_minutes = nil
	elsif line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"Starting\. IF YOU ARE NOT ALREADY AT DREAVEN\'S TABLE THEN IT\'S TOO LATE TO ATTEND THIS DREAVENING./i
		next_dreavening_minutes = nil
	elsif line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"(\d+) minutes? until the next Dreavening\./i || line =~ /^\[(Dreavening|Prime)\]\-GSIV\:Dreaven\: \"Next Dreavening is in (\d+) minutes/i
		next_dreavening_minutes = $2.to_i
		next_dreavening_seconds = (next_dreavening_minutes * 60)
		next_dreavening_start = Time.now + next_dreavening_seconds
		update_no_schedule_timer = true
	elsif line =~ /^(Dreaven|Iteno|Dravnib|Vonaq|Najash|Snooshezis|Bochser|Ardque) offers you .*\.  Click ACCEPT to accept the offer or DECLINE to decline it\.  The offer will expire in 30 seconds\./ && checkname !~ /Dreaven|Ryjin|Vonaq|Bochser|Najash|Ardque|Iteno|Dravnib|Snooshezis|Fulvus|Kholac|Nevaerd/
		fput "accept"
	end
end